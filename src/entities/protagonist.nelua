require 'math'

require 'utils'

require 'nene.core'
require 'nene.math'
require 'nene.texture'

require 'entities.namespace'
require 'entities.projectile'

local Vec2, Rect = Math.Vec2, Math.Rect

local GRAV_ACCELERATION <comptime> = 4
local HOR_SPEED <comptime> = 32
local HOR_FORCE <comptime> = 4
local VER_MAX_SPEED <comptime> = 128
local HOR_MAX_SPEED <comptime> = 128

-- HB: HitBox
local HB_OFFSET_X <comptime> = 7
local HB_OFFSET_Y <comptime> = 4
local HB_WIDTH <comptime> = 10
local HB_HEIGHT <comptime> = 22

local Protagonist = @record{
  pos: Vec2,
  vel: Vec2,
  sprite: Texture,
  proj_sprite: Texture,
  heart_sprite: Texture,
  last_frame_changed: uint32,
  frame: integer,
  ammo: byte,
  life_points: int8,
  projectiles: [10]Entities.Projectile,
}

function Protagonist.init(sprite: Texture, proj_sprite: Texture, heart_sprite: Texture): Protagonist
  return Protagonist{
    pos = {Confs.screen_size.w // 2, 32},
    =sprite,
    =proj_sprite,
    =heart_sprite,
    life_points = 10,
    vel = {0, -VER_MAX_SPEED},
    ammo = 10,
  }
end

function Protagonist:get_hitbox(): Rect
  return Rect.from_vec2(self.pos + Vec2{HB_OFFSET_X, HB_OFFSET_Y}, {HB_WIDTH, HB_HEIGHT})
end

function Protagonist:jump(mouse_dir: Vec2)
  self.vel.y = VER_MAX_SPEED * 0.75 * -mouse_dir.y
  self.vel.x = HOR_MAX_SPEED * 1.25 * -mouse_dir.x
end

function Protagonist:hurt(hit_dir: number)
  self:jump({hit_dir, -1})
  self.life_points = self.life_points - 1
end

function Protagonist:fire(mouse_pos: Vec2)
  if self.ammo <= 0 then return end

  for i = 0, < (#self.projectiles) do
    if not self.projectiles[i].active then
      local mouse_dir = Vec2.normalized(mouse_pos - self.pos)
      self.projectiles[i] = Entities.Projectile.init(self.pos + Vec2{11, 22}, mouse_dir, self.proj_sprite)

      self:jump(mouse_dir)

      self.ammo = math.max(self.ammo - 1, 0)
      break
    end
  end
end

function Protagonist:reload()
  self.ammo = math.min(self.ammo + 3, 10)
end

function Protagonist:update(nene: *Nene)
  self.vel.y = self.vel.y + GRAV_ACCELERATION

  local input_h = (do
    if nene:get_scancode(SDL_SCANCODE_A) then
      in (HOR_SPEED * -HOR_FORCE)
    elseif nene:get_scancode(SDL_SCANCODE_D) then
      in (HOR_SPEED * HOR_FORCE)
    else
      in 0
    end
  end)

  self.vel.x = self.vel.x + input_h * nene.delta_time

  if math.abs(self.vel.y) > VER_MAX_SPEED then
    self.vel.y = VER_MAX_SPEED * math.sign(self.vel.y)
  end

  if math.abs(self.vel.x) > HOR_MAX_SPEED then
    self.vel.x = HOR_MAX_SPEED * math.sign(self.vel.x)
  end

  self.pos = self.pos + self.vel * nene.delta_time

  local minx, maxx = Confs.playable_space.margin + Confs.tile_dimensions * 2, Confs.screen_size.w - Confs.playable_space.margin - Confs.tile_dimensions * 2
  local hitbox = self:get_hitbox()

  if hitbox.x < minx then
    self.pos.x = minx - (HB_OFFSET_X - 2)
    self:hurt(-1)
  elseif hitbox.x + HB_WIDTH > maxx then
    self.pos.x = maxx - (HB_OFFSET_X + HB_WIDTH + 2)
    self:hurt(1)
  end

  self.pos.y = math.max(-HB_OFFSET_Y, self.pos.y)

  if nene:get_mouse_button(0, true) then
    self:fire(nene.mouse_pos * 0.5)
  end

  for i = 0, < (#self.projectiles) do
    self.projectiles[i]:update(nene)
  end

  if nene.current_time - self.last_frame_changed > Confs.frame_duration then
    self.last_frame_changed = nene.current_time
    self.frame = (self.frame + 1) % 3
  end
end

function Protagonist:draw(nene: *Nene)
  local mouse_dir = Vec2.normalized(nene.mouse_pos * 0.5 - self.pos)
  local mouse_angle = math.deg(math.atan(-mouse_dir.y, mouse_dir.x)) + 180 - (45/2)

  local ysprite = (do
    switch math.ifloor(mouse_angle // 45)
    case 5 then in 0
    case 6 then in 1
    case 7, -1 then in 2
    case 0 then in 3
    case 1 then in 4
    case 2 then in 5
    case 3 then in 6
    case 4 then in 7
    else in 0
    end
  end)

  local hitbox = self:get_hitbox()
  local drawpos: Vec2 = {math.ifloor(self.pos.x), math.ifloor(self.pos.y)}

  local lp_limit = math.ifloor((self.life_points+1)/2)
  for i = 0, < 5 do
    if i >= lp_limit then continue end
    local idx = math.abs(math.abs(i - 2) - 2)
    local h_offset = math.sin(idx * 0.65) * 2
    local v_offset = math.sin((i/5)*0.75)*10

    local src: Rect = {i < 5 - 1 and 0 or 7*(self.life_points % 2), 0, 7, 6}
    local dst: Rect = Rect.from_vec2(drawpos + Vec2{8*h_offset + 12, -10 + 8*v_offset}, {7, 6})
    self.heart_sprite:draw(nene, nil, src, dst)
  end

  self.sprite:draw(nene, nil, {24 * self.frame, ysprite * 29, 24, 29}, Rect.from_vec2(drawpos, {24, 29}))

  for i = 0, < #self.projectiles do
    self.projectiles[i]:draw(nene)
  end
end

global Entities.Protagonist = Protagonist
