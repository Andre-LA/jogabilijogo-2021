require 'math'

require 'nene.core'
require 'nene.math'

require 'entities.namespace'

local Vec2, Rect = Math.Vec2, Math.Rect
local SPEED <comptime> = 128

local Projectile = @record{
  pos: Vec2,
  dir: Vec2,
  sprite: Texture,
  last_frame_changed: uint32,
  frame: integer,
  active: boolean,
}

function Projectile.init(pos: Vec2, dir: Vec2, sprite: Texture): Projectile
  return Projectile{
    active = true,
    =sprite,
    =pos,
    =dir,
  }
end

function Projectile:get_hitbox(): Rect
  return Rect.from_vec2(self.pos, {8, 8})
end

function Projectile:destroy()
  self.active = false
end

function Projectile:update(nene: *Nene)
  if not self.active then return end

  self.pos = self.pos + self.dir * SPEED * nene.delta_time

  if (
    self.pos.x < Confs.playable_space.margin + Confs.tile_dimensions * 2 or
    self.pos.x > Confs.screen_size.w - Confs.playable_space.margin - Confs.tile_dimensions * 2 - 4 or
    self.pos.y > Confs.screen_size.h or
    self.pos.y < -8
  ) then
    self:destroy()
  end

  if nene.current_time - self.last_frame_changed > Confs.frame_duration then
    self.last_frame_changed = nene.current_time
    self.frame = (self.frame + 1) % 6
  end
end

function Projectile:draw(nene: *Nene)
  if not self.active then return end

  local hitbox = self:get_hitbox()
  local drawpos: Vec2 = {math.ifloor(hitbox.x), math.ifloor(hitbox.y)}

  self.sprite:draw(nene, nil, {4 * self.frame, 0, 4, 4}, Rect{drawpos.x, drawpos.y, 8, 8})
end

global Entities.Projectile = Projectile
