require 'confs'

require 'nene.core'
require 'nene.colors'
require 'nene.math'
require 'nene.texture'

require 'nene.font'
require 'nene.text_texture'

require 'entities'

local Vec2 = Math.Vec2

local ok, nene = Nene.init("Jogabilijogo 2021", Confs.window_size.w, Confs.window_size.h) --, nil, nil, SDL_WINDOW_FULLSCREEN)
check(ok)
defer nene:terminate() end

local screen: Texture = Texture.create_texture(nene, Confs.screen_size.w, Confs.screen_size.h, nil, SDL_TEXTUREACCESS_TARGET)
defer screen:destroy() end

local protagonist_tex, ok = Texture.load(nene, 'res/arts/characters/player.png')
check(ok, 'could not load player texture')
defer protagonist_tex:destroy() end

local projectile_tex, ok = Texture.load(nene, 'res/arts/characters/bullet.png')
check(ok, 'could not load projectile texture')
defer projectile_tex:destroy() end

local enemy_tex, ok = Texture.load(nene, 'res/arts/characters/enemy.png')
check(ok, 'could not load enemy texture')
defer enemy_tex:destroy() end

local aim_tex, ok = Texture.load(nene, 'res/arts/characters/aim.png')
check(ok, 'could not load aim texture')
defer aim_tex:destroy() end

local bg_tex, ok = Texture.load(nene, 'res/arts/characters/scenary.png')
check(ok, 'could not load scenary bg texture')
defer bg_tex:destroy() end

local monogram24, ok = Font.load('res/monogram_extended.ttf', 24)
check(ok, 'could not load "monogram_extended.ttf, 24"')
defer monogram24:destroy() end

local monogram48, ok = Font.load('res/monogram_extended.ttf', 48)
check(ok, 'could not load "monogram_extended.ttf, 48"')
defer monogram48:destroy() end

local ammo_counter_texts: [11]TextTexture = {
  TextTexture.new(nene, '0', monogram24),
  TextTexture.new(nene, '1', monogram24),
  TextTexture.new(nene, '2', monogram24),
  TextTexture.new(nene, '3', monogram24),
  TextTexture.new(nene, '4', monogram24),
  TextTexture.new(nene, '5', monogram24),
  TextTexture.new(nene, '6', monogram24),
  TextTexture.new(nene, '7', monogram24),
  TextTexture.new(nene, '8', monogram24),
  TextTexture.new(nene, '9', monogram24),
  TextTexture.new(nene, '10', monogram24),
}

defer
  for i = 0, < #ammo_counter_texts do
    ammo_counter_texts[i]:destroy()
  end
end

local you_lost: TextTexture = TextTexture.new(nene, 'You lost', monogram48)
defer you_lost:destroy() end

local you_won: TextTexture = TextTexture.new(nene, 'You Won!', monogram48)
defer you_won:destroy() end

local protagonist = Entities.Protagonist.init(protagonist_tex, projectile_tex)

local last_enemy_spawn = 0_uint32

local enemies: [10]Entities.Enemy = {}

local enemies_destroyed = 0_u8

local function spawn_enemy()
  for i = 0, < #enemies do
    if not enemies[i].active then
      enemies[i] = Entities.Enemy.init(enemy_tex, nene.current_time)

      last_enemy_spawn = nene.current_time
      return
    end
  end
end

SDL_ShowCursor(SDL_DISABLE)

repeat
  nene:poll_events()

  if protagonist.life_points > 0 or enemies_destroyed > 5 then
    if nene.current_time - last_enemy_spawn > Confs.enemy_spawn_interval then
      spawn_enemy()
    end

    protagonist:update(nene)

    for i = 0, < #enemies do
      enemies[i]:update(protagonist, &enemies_destroyed, nene)
    end
  end

  nene:set_render_target(screen:get())
  nene:render_clear(Color{33, 37, 36})

  if enemies_destroyed > 5 then
    you_won:draw(nene, {0, 0})
  elseif protagonist.life_points > 0 then
    bg_tex:draw(nene, nil, nil, {Confs.playable_space.margin, 0})

    protagonist:draw(nene)

    for i = 0, < #enemies do
      enemies[i]:draw(nene)
    end

    ammo_counter_texts[protagonist.ammo]:draw(nene, nene.mouse_pos * 0.5 + Vec2{ 8, -16 })
    local aimx, aimy = math.ifloor(nene.mouse_pos.x * 0.5 - aim_tex.width / 2), math.ifloor(nene.mouse_pos.y * 0.5 - aim_tex.height / 2)
    aim_tex:draw(nene, nil, nil, {aimx, aimy})
  else
    you_lost:draw(nene, {0,0})
  end

  nene:set_render_target(nil)

  screen:draw(nene)
  nene:render_present()
until nene.quit
